<?php

namespace AppBundle\Repository;

/**
 * SubcriptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriptionRepository extends \Doctrine\ORM\EntityRepository
{
    public function deleteSubscription(\AppBundle\Entity\Subscription $subscription) {
        $em= $this->_em;
        $subscription->setStatus(0);
        $subscriber = new \AppBundle\Entity\Subscriber();
        $repositorySubscriber = $em->getRepository("AppBundle:Subscriber");
        $em->getConnection()->beginTransaction();
        try{
            $subscribers = $subscription->getSubscribers();
            foreach ($subscriber as $subscribers) {
                $subscriber->setSubscription(null);
                $repositorySubscriber->updateSubscriber($subscriber);
            }
            $em->persist($subscription);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }


    public function saveSubscription(\AppBundle\Entity\Subscription $subscription) {
        $em= $this->_em;
        $subscription->setStatus(1);
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($subscription);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }

    public function updateSubscription(\AppBundle\Entity\Subscription $subscription) {
        $em= $this->_em;
        $em->getConnection()->beginTransaction();
        try{
            $em->persist($subscription);
            $em->flush();
            $em->getConnection()->commit();
        } catch (Exception $ex) {
            $em->getConnection()->rollback();
            $em->close();
            throw $ex;
        }
    }
    public function getAll() 
    {
        $qb = $this->createQueryBuilder('s');
        $qb->where('s.status = :status')
           ->setParameter('status', 1);
        return $qb->getQuery()->getResult();
    }
    
    public function getSubscriptionQueryBuilder() {
         return $this
          ->createQueryBuilder('s')
          ->where('s.status = :status')
          ->setParameter('status', 1);

    }
}
